{"code":"import { NORMAL, SAME_TRANSITION, DIFFERENT_TRANSITION, NON_CONTRIBUTING } from './edge_type';\r\nimport { INTERSECTION, UNION, DIFFERENCE, XOR } from './operation';\r\n/**\r\n * @param  {SweepEvent} event\r\n * @param  {SweepEvent} prev\r\n * @param  {Operation} operation\r\n */\r\nexport default function computeFields(event, prev, operation) {\r\n    // compute inOut and otherInOut fields\r\n    if (prev === null) {\r\n        event.inOut = false;\r\n        event.otherInOut = true;\r\n        // previous line segment in sweepline belongs to the same polygon\r\n    }\r\n    else {\r\n        if (event.isSubject === prev.isSubject) {\r\n            event.inOut = !prev.inOut;\r\n            event.otherInOut = prev.otherInOut;\r\n            // previous line segment in sweepline belongs to the clipping polygon\r\n        }\r\n        else {\r\n            event.inOut = !prev.otherInOut;\r\n            event.otherInOut = prev.isVertical() ? !prev.inOut : prev.inOut;\r\n        }\r\n        // compute prevInResult field\r\n        if (prev) {\r\n            event.prevInResult = (!inResult(prev, operation) || prev.isVertical())\r\n                ? prev.prevInResult : prev;\r\n        }\r\n    }\r\n    // check if the line segment belongs to the Boolean operation\r\n    event.inResult = inResult(event, operation);\r\n}\r\n/* eslint-disable indent */\r\nfunction inResult(event, operation) {\r\n    switch (event.type) {\r\n        case NORMAL:\r\n            switch (operation) {\r\n                case INTERSECTION:\r\n                    return !event.otherInOut;\r\n                case UNION:\r\n                    return event.otherInOut;\r\n                case DIFFERENCE:\r\n                    // return (event.isSubject && !event.otherInOut) ||\r\n                    //         (!event.isSubject && event.otherInOut);\r\n                    return (event.isSubject && event.otherInOut) ||\r\n                        (!event.isSubject && !event.otherInOut);\r\n                case XOR:\r\n                    return true;\r\n            }\r\n            break;\r\n        case SAME_TRANSITION:\r\n            return operation === INTERSECTION || operation === UNION;\r\n        case DIFFERENT_TRANSITION:\r\n            return operation === DIFFERENCE;\r\n        case NON_CONTRIBUTING:\r\n            return false;\r\n    }\r\n    return false;\r\n}\r\n/* eslint-enable indent */\r\n"}
