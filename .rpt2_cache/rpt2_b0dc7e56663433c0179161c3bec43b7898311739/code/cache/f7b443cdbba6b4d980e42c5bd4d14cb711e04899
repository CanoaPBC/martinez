{"code":"import Queue from 'tinyqueue';\r\nimport SweepEvent from './sweep_event';\r\nimport compareEvents from './compare_events';\r\nimport { DIFFERENCE } from './operation';\r\nconst max = Math.max;\r\nconst min = Math.min;\r\nlet contourId = 0;\r\nfunction processPolygon(contourOrHole, isSubject, depth, Q, bbox, isExteriorRing) {\r\n    let i, len, s1, s2, e1, e2;\r\n    for (i = 0, len = contourOrHole.length - 1; i < len; i++) {\r\n        s1 = contourOrHole[i];\r\n        s2 = contourOrHole[i + 1];\r\n        e1 = new SweepEvent(s1, false, null, isSubject);\r\n        e2 = new SweepEvent(s2, false, e1, isSubject);\r\n        e1.otherEvent = e2;\r\n        if (s1[0] === s2[0] && s1[1] === s2[1]) {\r\n            continue; // skip collapsed edges, or it breaks\r\n        }\r\n        e1.contourId = e2.contourId = depth;\r\n        if (!isExteriorRing) {\r\n            e1.isExteriorRing = false;\r\n            e2.isExteriorRing = false;\r\n        }\r\n        if (compareEvents(e1, e2) > 0) {\r\n            e2.left = true;\r\n        }\r\n        else {\r\n            e1.left = true;\r\n        }\r\n        const x = s1[0], y = s1[1];\r\n        bbox[0] = min(bbox[0], x);\r\n        bbox[1] = min(bbox[1], y);\r\n        bbox[2] = max(bbox[2], x);\r\n        bbox[3] = max(bbox[3], y);\r\n        // Pushing it so the queue is sorted from left to right,\r\n        // with object on the left having the highest priority.\r\n        Q.push(e1);\r\n        Q.push(e2);\r\n    }\r\n}\r\nexport default function fillQueue(subject, clipping, sbbox, cbbox, operation) {\r\n    const eventQueue = new Queue(null, compareEvents);\r\n    let polygonSet, isExteriorRing, i, ii, j, jj; //, k, kk;\r\n    for (i = 0, ii = subject.length; i < ii; i++) {\r\n        polygonSet = subject[i];\r\n        for (j = 0, jj = polygonSet.length; j < jj; j++) {\r\n            isExteriorRing = j === 0;\r\n            if (isExteriorRing)\r\n                contourId++;\r\n            processPolygon(polygonSet[j], true, contourId, eventQueue, sbbox, isExteriorRing);\r\n        }\r\n    }\r\n    for (i = 0, ii = clipping.length; i < ii; i++) {\r\n        polygonSet = clipping[i];\r\n        for (j = 0, jj = polygonSet.length; j < jj; j++) {\r\n            isExteriorRing = j === 0;\r\n            if (operation === DIFFERENCE)\r\n                isExteriorRing = false;\r\n            if (isExteriorRing)\r\n                contourId++;\r\n            processPolygon(polygonSet[j], false, contourId, eventQueue, cbbox, isExteriorRing);\r\n        }\r\n    }\r\n    return eventQueue;\r\n}\r\n"}
