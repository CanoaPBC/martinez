{"code":"import signedArea from './signed_area';\r\nimport compareEvents from './compare_events';\r\nimport equals from './equals';\r\nexport default function compareSegments(le1, le2) {\r\n    if (le1 === le2)\r\n        return 0;\r\n    // Segments are not collinear\r\n    if (signedArea(le1.point, le1.otherEvent.point, le2.point) !== 0 ||\r\n        signedArea(le1.point, le1.otherEvent.point, le2.otherEvent.point) !== 0) {\r\n        // If they share their left endpoint use the right endpoint to sort\r\n        if (equals(le1.point, le2.point))\r\n            return le1.isBelow(le2.otherEvent.point) ? -1 : 1;\r\n        // Different left endpoint: use the left endpoint to sort\r\n        if (le1.point[0] === le2.point[0])\r\n            return le1.point[1] < le2.point[1] ? -1 : 1;\r\n        // has the line segment associated to e1 been inserted\r\n        // into S after the line segment associated to e2 ?\r\n        if (compareEvents(le1, le2) === 1)\r\n            return le2.isAbove(le1.point) ? -1 : 1;\r\n        // The line segment associated to e2 has been inserted\r\n        // into S after the line segment associated to e1\r\n        return le1.isBelow(le2.point) ? -1 : 1;\r\n    }\r\n    if (le1.isSubject === le2.isSubject) { // same polygon\r\n        var p1 = le1.point, p2 = le2.point;\r\n        if (p1[0] === p2[0] && p1[1] === p2[1] /*equals(le1.point, le2.point)*/) {\r\n            p1 = le1.otherEvent.point;\r\n            p2 = le2.otherEvent.point;\r\n            if (p1[0] === p2[0] && p1[1] === p2[1])\r\n                return 0;\r\n            else\r\n                return le1.contourId > le2.contourId ? 1 : -1;\r\n        }\r\n    }\r\n    else { // Segments are collinear, but belong to separate polygons\r\n        return le1.isSubject ? -1 : 1;\r\n    }\r\n    return compareEvents(le1, le2) === 1 ? 1 : -1;\r\n}\r\n"}
